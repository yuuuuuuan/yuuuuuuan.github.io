---
layout: post
title:  "[RTOS]回顾:信号量和互斥锁的使用"
date:   2023-04-29
categories: C语言   RTOS
---

[源码在这里](https://github.com/yuuuuuuan/Semaphore-and-Mutex)	信号量和互斥锁的使用

## 介绍

- **信号量**(Semaphore)，有时被称为信号灯，是**在多线程环境下使用的一种设施，是可以用来保证两个或多个关键代码段不被并发调用**。 在进入一个关键代码段之前，线程必须获取一个信号量；一旦该关键代码段完成了，那么该线程必须释放信号量。 其它想进入该关键代码段的线程必须等待直到第一个线程释放信号量。

- **互斥锁**（英语：Mutual exclusion，缩写 Mutex）是一种用于[多线程](https://zh.wikipedia.org/wiki/多线程)[编程](https://zh.wikipedia.org/wiki/编程)中，防止两条[线程](https://zh.wikipedia.org/wiki/线程)同时对同一公共资源（比如[全域变数](https://zh.wikipedia.org/wiki/全域變數)）进行读写的机制。该目的通过将代码切片成一个一个的[临界区域](https://zh.wikipedia.org/wiki/临界区域)（critical section）达成。临界区域指的是一块对公共资源进行存取的代码，并非一种机制或是算法。一个程序、进程、线程可以拥有多个临界区域，但是并不一定会应用互斥锁。

- **信号量和互斥锁的区别**是：1、**信号量用在多线程多任务同步时，而互斥锁是用在多线程多任务互斥的**；2、信号量可以当一个线程完成了某个动作时，让别的线程再进行某些动作，而互斥锁线程一旦占用某个资源，别的线程就无法访问； 3、互斥量值只能为0/1，信号量值可以为非负整数。

#### 互斥与同步

- **互斥**：是指某一资源同时只允许一个访问者对其进行访问，具有唯一性和排它性。但互斥无法限制访问者对资源的访问顺序，即访问是无序的。

- **同步**：是指在互斥的基础上（大多数情况），通过其它机制实现访问者对资源的有序访问。在大多数情况下，同步已经实现了互斥，特别是所有写入资源的情况必定是互斥的。

## 代码演示

#### 信号量

信号量的创建

```
/* 创建一个动态信号量，初始值是0 */
    dynamic_sem = rt_sem_create("dsem", 0, RT_IPC_FLAG_FIFO);
    if (dynamic_sem == RT_NULL)
    {
        rt_kprintf("create dynamic semaphore failed.\n");
        return -1;
    }
    else
    {
        rt_kprintf("create done. dynamic semaphore value = 0.\n");
    }
```

初始化两个线程，线程1在count每计数10次时，发送一个信号量，线程2在接收信号量后，对number进行加1操作

```
static void rt_thread1_entry(void *parameter)
{
    static rt_uint8_t count = 0;
  
    while(1)
    {
        if(count <= 100)
        {
            count++;           
        }
        else
            return; 
        
        /* count每计数10次，就释放一次信号量 */
         if(0 == (count % 10))
        {
            rt_kprintf("t1 release a dynamic semaphore.\n" ); 
            rt_sem_release(dynamic_sem);            
        }
    }
}
```

```
static void rt_thread2_entry(void *parameter)
{
    static rt_err_t result;
    static rt_uint8_t number = 0;
    while(1)
    {
        /* 永久方式等待信号量，获取到信号量，则执行number自加的操作 */
        result = rt_sem_take(dynamic_sem, RT_WAITING_FOREVER);
        if (result != RT_EOK)
        {        
            rt_kprintf("t2 take a dynamic semaphore, failed.\n");
            rt_sem_delete(dynamic_sem);
            return;
        }
        else
        {      
            number++;             
            rt_kprintf("t2 take a dynamic semaphore. number = %d\n" ,number);                        
        }
    }   
}
```

使用信号量的结果

```

 \ | /
- RT -     Thread Operating System
 / | \     3.1.0 build Jun 26 2023
 2006 - 2018 Copyright by rt-thread team
msh >se
semaphore_sample
msh >semaphore_sample
create done. dynamic semaphore value = 0.
msh >t1 release a dynamic semaphore.
t2 take a dynamic semaphore. number = 1
t1 release a dynamic semaphore.
t2 take a dynamic semaphore. number = 2
t1 release a dynamic semaphore.
t2 take a dynamic semaphore. number = 3
t1 release a dynamic semaphore.
t2 take a dynamic semaphore. number = 4
t1 release a dynamic semaphore.
t2 take a dynamic semaphore. number = 5
t1 release a dynamic semaphore.
t2 take a dynamic semaphore. number = 6
t1 release a dynamic semaphore.
t2 take a dynamic semaphore. number = 7
t1 release a dynamic semaphore.
t2 take a dynamic semaphore. number = 8
t1 release a dynamic semaphore.
t2 take a dynamic semaphore. number = 9
t1 release a dynamic semaphore.
t2 take a dynamic semaphore. number = 10


```

由此可以更形象的看出信号量的作用是保证线程间同步进行

#### 互斥量

互斥量的创建

```
/* 创建一个动态互斥量 */
    dynamic_mutex = rt_mutex_create("dmutex", RT_IPC_FLAG_FIFO);
    if (dynamic_mutex == RT_NULL)
    {
        rt_kprintf("create dynamic mutex failed.\n");
        return -1;
    }
```

互斥锁是一种保护共享资源的方法。当一个线程拥有互斥锁的时候，

可以保护共享资源不被其他线程破坏。线程1对2个number分别进行加1操作

线程2也会对2个number分别进行加1操作。使用互斥量保证2个number值保持一致

```
static void rt_thread_entry1(void *parameter)
{
      while(1)
      {
          /* 线程1获取到互斥量后，先后对number1、number2进行加1操作，然后释放互斥量 */
          rt_mutex_take(dynamic_mutex, RT_WAITING_FOREVER);          
          number1++;
          rt_thread_mdelay(10);
          number2++;          
          rt_mutex_release(dynamic_mutex);
       }	    
}

```

```
static void rt_thread_entry2(void *parameter)
{     
      while(1)
      {
          /* 线程2获取到互斥量后，检查number1、number2的值是否相同，相同则表示mutex起到了锁的作用 */
          rt_mutex_take(dynamic_mutex, RT_WAITING_FOREVER);
          if(number1 != number2)
          {
            rt_kprintf("not protect.number1 = %d, mumber2 = %d \n",number1 ,number2);
          }
          else
          {
            rt_kprintf("mutex protect ,number1 = mumber2 is %d\n",number1);            
          }
          
           number1++;
           number2++;
           rt_mutex_release(dynamic_mutex);
          
          if(number1 >=50)
              return;      
      }	  
}
```

打印结果

```

 \ | /
- RT -     Thread Operating System
 / | \     3.1.0 build Jun 26 2023
 2006 - 2018 Copyright by rt-thread team
msh >mu
mutex_sample
msh >mutex_sample
msh >mutex protect ,number1 = mumber2 is 1
mutex protect ,number1 = mumber2 is 2
mutex protect ,number1 = mumber2 is 3
mutex protect ,number1 = mumber2 is 4
mutex protect ,number1 = mumber2 is 5
mutex protect ,number1 = mumber2 is 6
mutex protect ,number1 = mumber2 is 7
mutex protect ,number1 = mumber2 is 8
mutex protect ,number1 = mumber2 is 9
mutex protect ,number1 = mumber2 is 10
mutex protect ,number1 = mumber2 is 11
mutex protect ,number1 = mumber2 is 12
mutex protect ,number1 = mumber2 is 13
mutex protect ,number1 = mumber2 is 14
mutex protect ,number1 = mumber2 is 15
mutex protect ,number1 = mumber2 is 16
mutex protect ,number1 = mumber2 is 17
mutex protect ,number1 = mumber2 is 18
mutex protect ,number1 = mumber2 is 19
mutex protect ,number1 = mumber2 is 20
mutex protect ,number1 = mumber2 is 21
mutex protect ,number1 = mumber2 is 22
mutex protect ,number1 = mumber2 is 23
mutex protect ,number1 = mumber2 is 24
mutex protect ,number1 = mumber2 is 25
mutex protect ,number1 = mumber2 is 26
mutex protect ,number1 = mumber2 is 27
mutex protect ,number1 = mumber2 is 28
mutex protect ,number1 = mumber2 is 29
mutex protect ,number1 = mumber2 is 30
mutex protect ,number1 = mumber2 is 31
mutex protect ,number1 = mumber2 is 32
mutex protect ,number1 = mumber2 is 33
mutex protect ,number1 = mumber2 is 34
mutex protect ,number1 = mumber2 is 35
mutex protect ,number1 = mumber2 is 36
mutex protect ,number1 = mumber2 is 37
mutex protect ,number1 = mumber2 is 38
mutex protect ,number1 = mumber2 is 39
mutex protect ,number1 = mumber2 is 40
mutex protect ,number1 = mumber2 is 41
mutex protect ,number1 = mumber2 is 42
mutex protect ,number1 = mumber2 is 43
mutex protect ,number1 = mumber2 is 44
mutex protect ,number1 = mumber2 is 45
mutex protect ,number1 = mumber2 is 46
mutex protect ,number1 = mumber2 is 47
mutex protect ,number1 = mumber2 is 48
mutex protect ,number1 = mumber2 is 49
```

若不适用互斥量

```

 \ | /
- RT -     Thread Operating System
 / | \     3.1.0 build Jun 26 2023
 2006 - 2018 Copyright by rt-thread team
msh >mu
mutex_sample
msh >mutex_sample
not protect.number1 = 1, mumber2 = 0 
not protect.number1 = 2, mumber2 = 1 
not protect.number1 = 3, mumber2 = 2 
not protect.number1 = 4, mumber2 = 3 
not protect.number1 = 5, mumber2 = 4 
not protect.number1 = 6, mumber2 = 5 
not protect.number1 = 7, mumber2 = 6 
not protect.number1 = 8, mumber2 = 7 
not protect.number1 = 9, mumber2 = 8 
not protect.number1 = 10, mumber2 = 9 
not protect.number1 = 11, mumber2 = 10 
not protect.number1 = 12, mumber2 = 11 
not protect.number1 = 13, mumber2 = 12 
not protect.number1 = 14, mumber2 = 13 
not protect.number1 = 15, mumber2 = 14 
not protect.number1 = 16, mumber2 = 15 
not protect.number1 = 17, mumber2 = 16 
not protect.number1 = 18, mumber2 = 17 
not protect.number1 = 19, mumber2 = 18 
not protect.number1 = 20, mumber2 = 19 
not protect.number1 = 21, mumber2 = 20 
not protect.number1 = 22, mumber2 = 21 
not protect.number1 = 23, mumber2 = 22 
not protect.number1 = 24, mumber2 = 23 
not protect.number1 = 25, mumber2 = 24 
not protect.number1 = 26, mumber2 = 25 
not protect.number1 = 27, mumber2 = 26 
not protect.number1 = 28, mumber2 = 27 
not protect.number1 = 29, mumber2 = 28 
not protect.number1 = 30, mumber2 = 29 
not protect.number1 = 31, mumber2 = 30 
not protect.number1 = 32, mumber2 = 31 
not protect.number1 = 33, mumber2 = 32 
not protect.number1 = 34, mumber2 = 33 
not protect.number1 = 35, mumber2 = 34 
not protect.number1 = 36, mumber2 = 35 
not protect.number1 = 37, mumber2 = 36 
not protect.number1 = 38, mumber2 = 37 
not protect.number1 = 39, mumber2 = 38 
not protect.number1 = 40, mumber2 = 39 
not protect.number1 = 41, mumber2 = 40 
not protect.number1 = 42, mumber2 = 41 
not protect.number1 = 43, mumber2 = 42 
not protect.number1 = 44, mumber2 = 43 
not protect.number1 = 45, mumber2 = 44 
not protect.number1 = 46, mumber2 = 45 
not protect.number1 = 47, mumber2 = 46 
not protect.number1 = 48, mumber2 = 47 
not protect.number1 = 49, mumber2 = 48 
```

我们可以明显的看出，没有互斥量的保护number1在线程1加1后直接直接跳转到线程2，

number1和mumber2失去了原定的同时加1，就是因为这两个线程可以同时操作一片空间而且会相互干扰，但如果添加了互斥锁，在一个线程对其中资源进行操作时，另一个线程无法对其相同资源进行操作，达到保护现场的目的。