---
layout: post
title:  "[C语言]项目:基于C51和LCD12864的推箱子游戏实现"
date:   2023-01-30 
categories: C语言
---

[源码在这里](https://github.com/yuuuuuuan/stc-push-the-box--)	基于 STC15W4K32S4 系列单片机实现推箱子游戏

## 介绍

游戏内的箱子只可以推, 不可以拉, 而且一次只能推动一个，玩家获得胜利条件就是通过有逻辑的移动，把所有的箱子都推到目的地。

## 硬件支持

**lcd12864点阵液晶显示屏**
带中文字库的128X64 是一种具有4 位/8 位并行、2 线或3 线串行多种接口方式，内部含有国标一级、二级简体 中文字库的点阵图形液晶显示模块；其显示分辨率为128×64, 内置8192 个16*16 点汉字，和128 个16*8 点ASCII 字符 集.利用该模块灵活的接口方式和简单、方便的操作指令，可构成全中文人机交互图形界面。可以显示8×4 行16×16 点 阵的汉字. 也可完成图形显示.低电压低功耗是其又一显著特点。由该模块构成的液晶显示方案与同类型的图形点阵液晶 显示模块相比，不论硬件电路结构或显示程序都要简洁得多，且该模块的价格也略低于相同点阵的图形液晶模块。

![image](/assets/074824yvjie8cltty5p5h5.jpg)
*STC15W4K32S4*

![image](/assets/LCD12864.jpg)
*与之适配的LCD显示屏*

## 软件实现

### 矩阵键盘驱动

这里采用线反转法扫面键盘，通过延时消抖精准捕捉按键

```
unsigned char  KeyScan(void)
  {	 //矩阵键盘监控
	   u8 KeyNO=0x10;     //反转法识别键扫描码,没有按键按下或者按键不正常，扫描码不在已知的范围，返回0x55
     u8 row,colm;       //行码、列码及扫描得到的键码
     u8 Key=0x55;    
		 P0=0xF0; //先将P0口高四位行线置1，低四位列线置0，如果有键按下
		          //则相应的行被拉低，此时P0口不等于0xF0。
		 NOP5();  //等待端口数据稳定
		
		 if (P0!=0xF0)//矩阵键盘有键按下
			{ DelayNms(3);//延时2-5ms，按键消抖动
		    if (P0!=0xF0) //确实有键按下，则启动按键识别
				   {
						row=P0;       //存行扫描码
						
					  P0=0x0F;			  //行列反转
					  NOP5();         //等待端口数据稳定  
					  colm=P0;        //存列扫描码
					  
						KeyNO=row+colm;	 //行列扫描码合并，得到键扫描码
						
						 switch (KeyNO)
								{ 
									case 0xee: Key=0;break;
									case 0xed: Key=1;break;
									case 0xeb: Key=2;break;
									case 0xe7: Key=3;break;
									case 0xde: Key=4;break;
									case 0xdd: Key=5;break;
									case 0xdb: Key=6;break;
									case 0xd7: Key=7;break;
									case 0xbe: Key=8;break;
									case 0xbd: Key=9;break;
									case 0xbb: Key=0xA;break;
									case 0xb7: Key=0xB;break;
									case 0x7e: Key=0xC;break;
									case 0x7d: Key=0xD;break;
									case 0x7b: Key=0xE;break;
									case 0x77: Key=0xF;break;
								
									default: Key=0x55;
		            }
						while(P0!=0x0F); //等待按键松开		
						}
				
		  }
	      return Key;		
  }	
```

### LCD12864驱动

如图所示，第一行显示的地址为80H-87H,第二行为90-97H，第三行为88H-8FH，第四行为98H-9FH。

![image](/assets/6342a057fc7a401125b7bbe97bc0358e.png)
![image](/assets/20191210003910777.png)
*显存映射*

#### 显示逻辑

![image](/assets/2018050313314840.png)

*引脚图（引脚4到14为主要功能引脚）*

- **初始化**

在开始使用LCD12864之前，需要进行初始化。这通常包括设置显示模式（例如，图形模式或文本模式）、清除屏幕、选择字体和其他特定配置。

```
void LCDInit(void) //LCM初始化
{
    PSB = 1;    //并口
//  PSB = 0;    //SPI口
    delay_ms(10);
    LCD_RESET = 0;
    delay_ms(10);
    LCD_RESET = 1;
    delay_ms(100);
    
    WriteCommandLCD(0x30,1); //显示模式设置,开始要求每次检测忙信号
    WriteCommandLCD(0x01,1); //显示清屏
    WriteCommandLCD(0x06,1); // 显示光标移动设置
    WriteCommandLCD(0x0C,1); // 显示开及光标设置
}
```

- **写指令**

写指令首先要将管脚的RS和RW置零，告诉LCD你要开始写指令了，其中代码的WCLCD为其中具体要LCD后面要进行的指令模式，详细指令见如下图：

```c
//写指令
void WriteCommandLCD(u8 WCLCD,BuysC) //BuysC为0时忽略忙检测
{
    if (BuysC) ReadStatusLCD(); //根据需要检测忙 
    LCD_RS = 0;
    LCD_RW = 0; 
    LCD_Data = WCLCD;
        LCD_delay();
    LCD_E = 1; 
    LCD_delay();
    LCD_E = 0;  
}
```
![image](/assets/20180706232728504.png)

*基础指令表*

- **写数据**

同样的道理，将RS置1，RW置零，则表示告诉LCD进入写数据的模式，WDLCD则为数据。

```c
//写数据
void WriteDataLCD(u8 WDLCD)
{
    ReadStatusLCD(); //检测忙 
    LCD_RS = 1;
    LCD_RW = 0;
    LCD_Data = WDLCD;
        LCD_delay();
    LCD_E = 1;
    LCD_delay();
    LCD_E = 0;
}
```

- **读数据**

当有数据写入RAM时我们怎么读出来呢，现在就可以用到我们的 ReadStatusLCD 函数，也是同样的将 RS 置0，RW 置1，直接返回RAM中存储的数据

```c
u8 ReadStatusLCD(void)
{
    LCD_Data = 0xFF; 
    LCD_RS = 0;
    LCD_RW = 1; 
        LCD_delay();
    LCD_E = 1;
        LCD_delay();
    while (LCD_Data & Busy); //检测忙信号
    LCD_E = 0;
    return(LCD_Data);
}
```

#### 显示字符(字库中已有的汉字或符号)

当我想显示一些英文字符时，这时候我们是不是要查英文的编码表，一个一个将他们编码画出来呢？当然不用，LCD12864中是有英文字库的，比如当我们想要显示下列的字符时：

```c
u8  code name[] = {"yuuuuuuan"};
```

我们可以调用下列函数：

```
//按指定位置显示一串字符
void DisplayListChar(u8 X, u8 Y, u8 code *DData)
{
    u8 ListLength,X2;
    ListLength = 0;
    X2 = X;
    if(Y < 1)   Y=1;
    if(Y > 4)   Y=4;
    X &= 0x0F; //限制X不能大于16，Y在1-4之内
    switch(Y)
    {
        case 1: X2 |= 0X80; break;  //根据行数来选择相应地址
        case 2: X2 |= 0X90; break;
        case 3: X2 |= 0X88; break;
        case 4: X2 |= 0X98; break;
    }
    WriteCommandLCD(X2, 1); //发送地址码
    while (DData[ListLength] >= 0x20) //若到达字串尾则退出
    {
        if (X <= 0x0F) //X坐标应小于0xF
        {
            WriteDataLCD(DData[ListLength]); //
            ListLength++;
            X++;
        }
    }
}
```

其中X为行数，Y为列数，DData为要输入的字符，这样我们就可以在屏幕上自定义显示英文字符了！

#### 显示图像(自定义编辑)

官方中并没有提供显示图像的函数，但是我们通过学习已经深刻理解了LCD12864的显示原理，我们可以自定义编辑函数来显示一些简单的图像，同样图像显示每次都需要清屏，但是他不像字符显示会自动清，我们每次在绘图时都需要自己定义一个清屏函数来实现清屏：

```
void DisplayClear (void)
{
    u8 x,y,i;
    for(i=0;i<9;)       //分两屏，上半屏和下半屏，因为起始地址不同，需要分开
    {
        for(x=0;x<32;x++)   //32行
        {
            WriteCommandLCD(0x34,1);
            WriteCommandLCD((0x80+x),1);//列地址
            WriteCommandLCD((0x80+i),1);    //行地址，下半屏，即第三行地址0X88
            WriteCommandLCD(0x30,1);        
            for(y=0;y<16;y++)   
                WriteDataLCD(0x00);//读取数据写入LCD      
        }
        i+=8;
    }
    WriteCommandLCD(0x36,1);    //扩充功能设定
    WriteCommandLCD(0x30,1);
}
```

下列是绘图函数的基本绘图实现：

```
void DisplayImage (u8 code *DData)
{
    u8 x,y,i;
    unsigned int tmp=0;
    for(i=0;i<9;)       //分两屏，上半屏和下半屏，因为起始地址不同，需要分开
    {
        for(x=0;x<32;x++)   //32行
        {
            WriteCommandLCD(0x34,1);
            WriteCommandLCD((0x80+x),1);//列地址
            WriteCommandLCD((0x80+i),1);    //行地址，下半屏，即第三行地址0X88
            WriteCommandLCD(0x30,1);        
            for(y=0;y<16;y++)   
                WriteDataLCD(DData[tmp+y]);//读取数据写入LCD
            tmp+=16;        
        }
        i+=8;
    }
    WriteCommandLCD(0x36,1);    //扩充功能设定
    WriteCommandLCD(0x30,1);
}
```

可以通过编辑来实现一些简单的像素图片：

```
code u8 frame_img_welcome[1024] = {

0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0X80,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X01,
0X80,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X01,
0X80,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X01,
0X80,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X01,
0X80,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X01,
0X80,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X01,
0X80,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X01,
0X80,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X01,
0X80,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X01,
0X80,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X01,
0X80,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X01,
0X80,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X01,
0X80,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X01,
0X80,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X01,
0X80,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X01,
0X80,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X01,
0X80,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X01,
0X80,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X01,
0X80,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X01,
0X80,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X01,
0X80,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X01,
0X80,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X01,
0X80,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X01,
0X80,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X01,
0X80,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X01,
0X80,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X01,
0X80,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X01,
0X80,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X01,
0X80,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X01,
0X80,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X01,
0X80,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X01,
0X80,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X01,
0X80,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X01,
0X80,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X01,
0X80,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X01,
0X80,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X01,
0X80,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X01,
0X80,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X01,
0X80,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X01,
0X80,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X01,
0X80,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X01,
0X80,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X01,
0X80,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X01,
0X80,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X01,
0X80,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X01,
0X80,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X01,
0X80,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X01,
0X80,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X01,
0X80,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X01,
0X80,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X01,
0X80,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X01,
0X80,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X01,
0X80,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X01,
0X80,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X01,
0X80,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X01,
0X80,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X01,
0X80,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X01,
0X80,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X01,
0X80,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X01,
0X80,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X01,
0X80,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X01,
0X80,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X01,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,

		
};
```

*上图表示项目中基本的游戏边框*



### 游戏逻辑

- **形象化地图**

为了方便地图绘制，这里采用三维数组的形式来表示各个元素代表的方块

```
u8 MAP[LEVEL][ROW][COL] = 
{
	{
		{0,0,0,1,1,1,0,0},
		{0,0,0,1,4,1,0,0},
		{0,0,0,1,0,1,0,0},
		{1,1,1,1,3,1,1,1},
		{1,4,0,3,2,3,4,1},
		{1,1,1,1,3,1,1,1},
		{0,0,0,1,4,1,0,0},
		{0,0,0,1,1,1,0,0}
	}
};
```

*这里表示第一关的地图*

其中的数字代表各个元素：

```
#define BLANK 0
#define WALL 1
#define PLAYER 2
#define BOX 3
#define DES 4
#define PLAYER_DES 6
#define BOX_DES 7
```

- **各元素交互**

元素交互也是采用的数组中互换元素然后刷新地图来进行元素之间位置的变化和方块的交互void 
	

	game_move(void)
	{
		switch(button)
		{
		...
		}
	}

```

```

- **地图绘制**

首先我们需要确定玩家的位置，以便后面对其进行移动操作,并且在绘制相应的元素

```
void game_draw(void)
{
	u8 j=0,k=0;
	for(j=0;j<ROW;j++)
	{	
		for(k=0;k<COL;k++)
		{
			if(MAP[LEVEL_CNT][j][k]==PLAYER||MAP[LEVEL_CNT][j][k]==(PLAYER_DES))
			{
				PLAYER_ROW=j;
				PLAYER_COL=k;
			}
			
			if(MAP[LEVEL_CNT][j][k]==(BOX_DES))
			{
				DESBOX++;
				if(DES_CNT[LEVEL_CNT]==DESBOX)
				{
					DESBOX = 0;
					LEVEL_CNT++;
				}
			}
			switch(MAP[LEVEL_CNT][j][k])
			{
				case BLANK:
					Displaycube (j,k,Img_BLANK);
					break;
				case WALL:
					Displaycube (j,k,Img_WALL);
					break;
				case PLAYER:
					Displaycube (j,k,Img_PLAYER);
					break;
				case BOX:
					Displaycube (j,k,Img_BOX);
					break;
				case DES:
					Displaycube (j,k,Img_DES);
					break;
				case PLAYER_DES:
					Displaycube (j,k,Img_DP);
					break;
				case BOX_DES:
					Displaycube (j,k,Img_DB);
					break;
			}

		}
	}
}
```



### UI设计

- **开机动画**

开启后会显示一行文字表示游戏名称正在开始游戏和游戏作者

- **游戏元素**

玩家编码：

```
code u8 Img_PLAYER[64] = 
{
	0x18,0x18,0x7E,0x5A,0x5A,0x18,0x24,0x24
};
```

目的地编码：

```
code u8 Img_DES[64] = 
{
	0x00,0x18,0x24,0x42,0x42,0x24,0x18,0x00
};
```

墙编码：

```
code u8 Img_WALL[64] = 
{
	0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff
};
```

箱子编码：

```
code u8 Img_BOX[64] = 
{
	0xFF,0x81,0xFF,0x81,0x81,0xFF,0x81,0xFF
};
```

箱子进入目的地编码：

```
code u8 Img_DB[64] = 
{
	0xFF,0xC3,0xA5,0x99,0x99,0xA5,0xC3,0xFF
};
```

玩家进入目的地编码：

```
code u8 Img_DP[64] = 
{
	0x18,0x3C,0x7E,0x5A,0x5A,0x5A,0x3C,0x24
};
```

空白地区编码：

```
code u8 Img_BLANK[64] = 
{
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
};
```

- **界面排版**

左边64×64为游戏区域，右边64×64为关卡数以及游戏时间

![image](/assets/图片1.png)

