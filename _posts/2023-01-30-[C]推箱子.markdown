---
layout: post
title:  "[C]项目:基于C51和LCD12864的推箱子游戏实现"
date:   2023-01-30 
categories: C++
---

基于STC15W4K32S4系列单片机实现推箱子游戏

## 介绍

游戏内的箱子只可以推, 不可以拉, 而且一次只能推动一个，玩家获得胜利条件就是通过有逻辑的移动，把所有的箱子都推到目的地。

## 硬件支持

**lcd12864点阵液晶显示屏**
带中文字库的128X64 是一种具有4 位/8 位并行、2 线或3 线串行多种接口方式，内部含有国标一级、二级简体 中文字库的点阵图形液晶显示模块；其显示分辨率为128×64, 内置8192 个16*16 点汉字，和128 个16*8 点ASCII 字符 集.利用该模块灵活的接口方式和简单、方便的操作指令，可构成全中文人机交互图形界面。可以显示8×4 行16×16 点 阵的汉字. 也可完成图形显示.低电压低功耗是其又一显著特点。由该模块构成的液晶显示方案与同类型的图形点阵液晶 显示模块相比，不论硬件电路结构或显示程序都要简洁得多，且该模块的价格也略低于相同点阵的图形液晶模块。

![image](/assets/074824yvjie8cltty5p5h5.jpg)
*STC15W4K32S4*

![image](/assets/LCD12864.jpg)
*与之适配的LCD显示屏*

## 软件实现

### 矩阵键盘驱动

这里采用线反转法扫面键盘，通过延时消抖精准捕捉按键

```
unsigned char  KeyScan(void)
  {	 //矩阵键盘监控
	   u8 KeyNO=0x10;     //反转法识别键扫描码,没有按键按下或者按键不正常，扫描码不在已知的范围，返回0x55
     u8 row,colm;       //行码、列码及扫描得到的键码
     u8 Key=0x55;    
		 P0=0xF0; //先将P0口高四位行线置1，低四位列线置0，如果有键按下
		          //则相应的行被拉低，此时P0口不等于0xF0。
		 NOP5();  //等待端口数据稳定
		
		 if (P0!=0xF0)//矩阵键盘有键按下
			{ DelayNms(3);//延时2-5ms，按键消抖动
		    if (P0!=0xF0) //确实有键按下，则启动按键识别
				   {
						row=P0;       //存行扫描码
						
					  P0=0x0F;			  //行列反转
					  NOP5();         //等待端口数据稳定  
					  colm=P0;        //存列扫描码
					  
						KeyNO=row+colm;	 //行列扫描码合并，得到键扫描码
						
						 switch (KeyNO)
								{ 
									case 0xee: Key=0;break;
									case 0xed: Key=1;break;
									case 0xeb: Key=2;break;
									case 0xe7: Key=3;break;
									case 0xde: Key=4;break;
									case 0xdd: Key=5;break;
									case 0xdb: Key=6;break;
									case 0xd7: Key=7;break;
									case 0xbe: Key=8;break;
									case 0xbd: Key=9;break;
									case 0xbb: Key=0xA;break;
									case 0xb7: Key=0xB;break;
									case 0x7e: Key=0xC;break;
									case 0x7d: Key=0xD;break;
									case 0x7b: Key=0xE;break;
									case 0x77: Key=0xF;break;
								
									default: Key=0x55;
		            }
						while(P0!=0x0F); //等待按键松开		
						}
				
		  }
	      return Key;		
  }	
```

### LCD12864驱动

如图所示，第一行显示的地址为80H-87H,第二行为90-97H，第三行为88H-8FH，第四行为98H-9FH。

![image](/assets/6342a057fc7a401125b7bbe97bc0358e.png)
![image](/assets/20191210003910777.png)
*显存映射*

#### 显示逻辑

- 初始化

在开始使用LCD12864之前，需要进行初始化。这通常包括设置显示模式（例如，图形模式或文本模式）、清除屏幕、选择字体和其他特定配置。

- 数据处理

要在LCD上显示文本或图形，您需要将数据转换为相应的像素点。在文本模式下，字符会被转换为预定义的像素点，然后逐个显示在屏幕上。在图形模式下，您可以通过设置像素点的状态来显示图形。

- 写指令

```
//写指令
void WriteCommandLCD(u8 WCLCD,BuysC) //BuysC为0时忽略忙检测
{
    if (BuysC) ReadStatusLCD(); //根据需要检测忙 
    LCD_RS = 0;
    LCD_RW = 0; 
    LCD_Data = WCLCD;
        LCD_delay();
    LCD_E = 1; 
    LCD_delay();
    LCD_E = 0;  
}
```
- 写数据

- 读数据

#### 显示字符(字库中已有的汉字或符号)

#### 显示图像(自定义编辑)

