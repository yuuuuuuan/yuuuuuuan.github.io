---
layout: post
title:  "[RTOS]设计:生产者消费者问题"
date:   2023-05-06
categories: C语言   RTOS
---

[源码在这里](https://github.com/yuuuuuuan/producer_consumer)	生产者消费者问题

## 介绍

**生产者消费者问题**（英语：Producer-consumer problem），也称**有限缓冲问题**（Bounded-buffer problem），是一个[多进程](https://zh.wikipedia.org/wiki/多进程)[同步](https://zh.wikipedia.org/wiki/同步)问题的经典案例。该问题描述了共享固定大小[缓冲区](https://zh.wikipedia.org/wiki/缓冲区)的两个进程——即所谓的“生产者”和“消费者”——在实际运行时会发生的问题。生产者的主要作用是生成一定量的数据放到缓冲区中，然后重复此过程。与此同时，消费者也在缓冲区消耗这些数据。该问题的关键就是要保证生产者不会在缓冲区满时加入数据，消费者也不会在缓冲区中空时消耗数据。

要解决该问题，就必须让生产者在缓冲区满时休眠（要么干脆就放弃数据），等到下次消费者消耗缓冲区中的数据的时候，生产者才能被唤醒，开始往缓冲区添加数据。同样，也可以让消费者在缓冲区空时进入休眠，等到生产者往缓冲区添加数据之后，再唤醒消费者。通常采用[进程间通信](https://zh.wikipedia.org/wiki/进程间通信)的方法解决该问题，常用的方法有[信号灯法](https://zh.wikipedia.org/wiki/信号量)[[1\]](https://zh.wikipedia.org/zh-hans/生产者消费者问题#cite_note-1)等。如果解决方法不够完善，则容易出现死锁的情况。出现死锁时，两个线程都会陷入休眠，等待对方唤醒自己。该问题也能被推广到多个生产者和消费者的情形。

## 代码实现

创建三个信号量

```
/* 初始化3个信号量 */
    rt_sem_init(&sem_lock, "lock",     1,      RT_IPC_FLAG_FIFO);
    rt_sem_init(&sem_empty, "empty",   MAXSEM, RT_IPC_FLAG_FIFO);
    rt_sem_init(&sem_full, "full",     0,      RT_IPC_FLAG_FIFO);
```

*"lock"信号量表示对资源进行操作时对其上锁（一时间只允许一个线程对其操作）*

*“empty”信号量表示初始有5个空位，每次消费者操作都会占用一个empty*

*“full”信号量初始值为0，只有在生产者生产完后才会发布1个满位，消费者才能take，保证了期间同步*

生产者线程创建：

```
/* 创建生产者线程 */
    producer_tid = rt_thread_create("producer",
                                    producer_thread_entry, RT_NULL,
                                    THREAD_STACK_SIZE,
                                    THREAD_PRIORITY - 1, THREAD_TIMESLICE);
    if (producer_tid != RT_NULL)
    {
        rt_thread_startup(producer_tid);
    }
    else
    {
        rt_kprintf("create thread producer failed");
        return -1;
    }
```

2个消费者线程的创建：

```
/* 创建消费者线程 */
    consumer_tid = rt_thread_create("consumer2",
                                    consumer_thread_entry, RT_NULL,
                                    THREAD_STACK_SIZE,
                                    THREAD_PRIORITY + 1, THREAD_TIMESLICE);
    if (consumer_tid != RT_NULL)
    {
        rt_thread_startup(consumer_tid);
    }
    else
    {
        rt_kprintf("create thread consumer 1 failed");
        return -1;
    }
```

生产者线程入口：

```
/* 消费者线程入口 */
void consumer_thread_entry(void *parameter)
{
    rt_uint32_t sum = 0;

    while (1)
    {
        /* 获取一个满位 */
        rt_sem_take(&sem_full, RT_WAITING_FOREVER);

        /* 临界区，上锁进行操作 */
        rt_sem_take(&sem_lock, RT_WAITING_FOREVER);
        sum += array[get % MAXSEM];
        rt_kprintf("the consumer[%d] get a number: %d\n", (get % MAXSEM), array[get % MAXSEM]);
        get++;
        rt_sem_release(&sem_lock);

        /* 释放一个空位 */
        rt_sem_release(&sem_empty);

        /* 生产者生产到10个数目，停止，消费者线程相应停止 */
        if (get == 100) break;

        /* 暂停一小会时间 */
        rt_thread_mdelay(50);
    }

    rt_kprintf("the consumer sum is: %d\n", sum);
    rt_kprintf("the consumer exit!\n");
}
```

消费者线程入口：

```
/* 消费者线程入口 */
void consumer2_thread_entry(void *parameter)
{
    rt_uint32_t sum2 = 0;

    while (1)
    {
        /* 获取一个满位 */
        rt_sem_take(&sem_full, RT_WAITING_FOREVER);

        /* 临界区，上锁进行操作 */
        rt_sem_take(&sem_lock, RT_WAITING_FOREVER);
        sum2 += array[get % MAXSEM];
        rt_kprintf("the consumer[%d] get a number: %d\n", (get % MAXSEM), array[get % MAXSEM]);
        get++;
        rt_sem_release(&sem_lock);

        /* 释放一个空位 */
        rt_sem_release(&sem_empty);

        /* 生产者生产到10个数目，停止，消费者线程相应停止 */
        if (get == 100) break;

        /* 暂停一小会时间 */
        rt_thread_mdelay(50);
    }

    rt_kprintf("the consumer sum is: %d\n", sum2);
    rt_kprintf("the consumer exit!\n");
}
```

结果打印：

```

 \ | /
- RT -     Thread Operating System
 / | \     3.1.0 build Jun 26 2023
 2006 - 2018 Copyright by rt-thread team
msh >pro
producer_consumer
msh >producer_consumer
the producer generates a number: 1
the consumer[0] get a number: 1
the producer generates a number: 2
the consumer[1] get a number: 2
the producer generates a number: 3
the producer generates a number: 4
the consumer[2] get a number: 3
the consumer[3] get a number: 4
the producer generates a number: 5
the producer generates a number: 6
the consumer[4] get a number: 5
the producer generates a number: 7
the consumer[0] get a number: 6
the producer generates a number: 8
the producer generates a number: 9
the consumer[1] get a number: 7
the consumer[2] get a number: 8
the producer generates a number: 10
the producer generates a number: 11
the consumer[3] get a number: 9
the producer generates a number: 12
the consumer[4] get a number: 10
the producer generates a number: 13
the producer generates a number: 14
the consumer[0] get a number: 11
the consumer[1] get a number: 12
the producer generates a number: 15
the producer generates a number: 16
the consumer[2] get a number: 13
the producer generates a number: 17
the consumer[3] get a number: 14
the producer generates a number: 18
the producer generates a number: 19
the consumer[4] get a number: 15
the consumer[0] get a number: 16
the producer generates a number: 20
the producer generates a number: 21
the consumer[1] get a number: 17
the producer generates a number: 22
the consumer[2] get a number: 18
the producer generates a number: 23
the consumer[3] get a number: 19
the producer generates a number: 24
```

