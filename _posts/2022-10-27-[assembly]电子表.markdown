---
layout: post
title:  "[assembly]设计:基于C51设计电子表"
date:   2022-10-27
categories: assembly
---

[源码在这里](https://github.com/yuuuuuuan/clock)	用汇编来设计电子表

## 介绍

#### 数码管显示

采用595编码器，输入占用数码管数量和显示数字，然后通过查表在数码管上打印出数字

![image](/assets/20200325100144656.png)

例如按照编码表：

```
T_Disp: DB 3FH,06H,5BH,4FH,66H,6DH, 7DH,07H
              DB  7FH,6FH,77H,7CH,39H,5EH,79H,71H,00H,40H;
```

其中3FH（00111111）代表的就是0（abcdef亮其他全灭）

在数码管上显示0，其他数字以此类推

#### 中断

- **中断向量**

​		在C51中有固定的内存地址存储中断向量

```
ORG	0003H		; INT0 中断向量
	LJMP	INT0_ISR 
	ORG	0013H		; INT1 中断向量
	LJMP	INT1_ISR 
	ORG  001BH            ;T1中断向量
           	AJMP  T1_ISR
```

INT0中断 地址 0003H		INT1中断 地址 0013H		T1定时器 地址 001BH

我们用INT0中断来控制调整时间的小时，用INT1中断来控制调整时间的分钟

#### 内部逻辑

我们需要使用到8个数码管，前两个用于表示小时（24进制），中间两个用于表示分钟，后面用于表示秒

中间用小数点隔开，使用定时器来控制时间。

## 代码

设置时间初值和定时器初始化

```
MOV hour,#12
		MOV minute,#30
		MOV second,#0
   		MOV	R0, #LED8
		MOV	R2, #8
		MOV  R5,  #14H       ;定时次数，每次50ms
          		MOV  TMOD,  #00H ;T1方式0定时
           		MOV  TH1,  #3CH    ;50ms定时初值
           		MOV  TL1,  #0B0H
		SETB  ET1                  ;T1中断允许
               		SETB  EA                   ;中断总允许
               		SETB  PT1                  ;T1高优先级
               		SETB  TR1                  ;启动定时
```

中断初始化

```
 SETB	EX1		  ;   INT1允许
				  SETB	EX0	  ;   INT0允许
	              SETB	IT1		  ;   INT1 下降沿中断
				  SETB	IT0		  ;   INT0 下降沿中断
	              SETB	EA		  ;   允许总中断	
                    SETB   PX1                           ;    高优先级
					SETB   PX0                          ;    高优先级
```

配置数码管

```
DispScan: MOV	A, hour
	              MOV	B, #10
	              DIV  	AB
	              MOV	LED8+0, A    ;十位
	              MOV	LED8+1, B    ;个位
	              MOV        R7, #8          ; 2个数码管

		MOV A,minute
		MOV	B, #10
	              DIV  	AB
	              MOV	LED8+2, A    ;十位
	              MOV	LED8+3, B    ;个位
	              MOV        R7, #8          ; 2个数码管
		
		MOV A,second
		MOV	B, #10
	              DIV  	AB
	              MOV	LED8+4, A    ;十位
	              MOV	LED8+5, B    ;个位
				  MOV   LED8+6, #17
				  MOV   LED8+7, #17
	              MOV        R7, #8          ; 2个数码管
```

595数码管驱动

```
NEXT:	
			
			MOV	DPTR, #T_COM   ; 位码表头   
	        MOV	A, disp_index      ;  数码管号
	        MOVC	A, @A+DPTR
	        CPL 	A                        ; 595级联时用的/Q7
	        LCALL	Send_595	; 输出位码
	        MOV	DPTR, #T_Disp ; 7段码表头
	        MOV	A, disp_index
	        ADD	A, #LED8
	        MOV	R0, A
	        MOV	A, @R0               ; 待显示的数
MOVC	A, @A+DPTR
LCALL	Send_595	; 输出段码
CLR	 HC595_RCLK	; 产生锁存时钟
SETB	HC595_RCLK

INC	 disp_index      ; 下一数码管
DJNZ    R7, NEXT
MOV	disp_index, #0 ; 8位结束回0
RET
; HC595串行移位输出一个字符

Send_595:   MOV   R2, #8
Send_Loop: RLC      A
	                  MOV  HC595_SER, C
	                  CLR    HC595_SRCLK 
                      SETB  HC595_SRCLK  ; 产生移位脉冲
	                  DJNZ  R2, Send_Loop
	                  RET

```

DB表

```
T_Disp: DB 3FH,06H,5BH,4FH,66H,6DH, 7DH,07H
              DB  7FH,6FH,77H,7CH,39H,5EH,79H,71H,00H,40H;
; 0-F的7段码及消隐 
T_COM: DB 01H,02H,08H,10H,40H,80H,04H,20H  ;  位码
```

进位逻辑，每次计时器1s触发一次

```
T1_ISR: DJNZ  R5,  EXIT          ; 1s未到，退出中断
              MOV  R5,  #14H
    
	
	MOV A,second
	CJNE A,#59,SECOND_ADD
	MOV second,#0
	
	MOV A,minute
	CJNE A,#59,MINUTE_ADD
	MOV minute,#0
	
	MOV A,hour
	CJNE A,#23,HOUR_ADD
	MOV hour,#0
	     
	EXIT: RETI
	SECOND_ADD:		INC second  
	RETI
	MINUTE_ADD:		INC minute
	RETI
	HOUR_ADD:		INC hour
	RETI
```

中断逻辑，按下INT0小时++，按下INT1分钟++

```
INT0_ISR:  
			
			INC hour
			MOV A,hour
			CJNE A,#24,EXIT2
			MOV hour,#0
			
			EXIT2:
			RETI

INT1_ISR:  
		
			INC minute 
			MOV A,minute
			CJNE A,#60,EXIT1
			MOV minute,#0
			
			EXIT1:RETI
			
```

